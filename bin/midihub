#!/usr/bin/env python

import importlib
import traceback

import midihub.simple_logging as logging


def import_module(name):
    for module_path in (name, 'midihub.endpoints.' + name):
        try:
            return importlib.import_module(module_path)
        except ImportError as e:
            if e.message != 'No module named ' + name:
                raise
    raise ImportError("Unrecognized MIDI endpoint: module %s not found" % name)

def make_midi_dst(arg):
    if arg == '-':
        arg = 'pipe:'
    elif ':' not in arg:
        arg = 'smf://' + arg
    (scheme, arg) = arg.split(':', 1)
    module = import_module(scheme)
    if not hasattr(module, 'make_dst'):
        raise RuntimeError("%r does not define a MIDI sink" % module)
    return module.make_dst(arg[2:])


def main(args):
    sinks = map(make_midi_dst, args.dst)
    def emit(*a, **k):
        for s in sinks[:]:
            try:
                s.emit(*a, **k)
            except Exception:
                traceback.print_exc()
                sinks.remove(s)
                if not sinks:
                    logging.warning("No more MIDI sinks!")
    try:
        src = args.src
        if src == '-':
            src = 'pipe:'
        elif ':' not in src:
            src = 'smf://' + src
        (scheme, arg) = src.split(':', 1)
        module = import_module(scheme)
        if not hasattr(module, 'run_src'):
            raise RuntimeError("%r does not define a MIDI source" % module)
        module.run_src(arg[2:], emit)
    finally:
        for s in sinks: s.eof()


if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('src', help="- (stdin) | .mid file | midi: (realtime)")
    parser.add_argument('dst', nargs='*', help="- (stdout) | .mid file | udp://HOST | fluid:")
    main(parser.parse_args())
