#!/usr/bin/env python

import importlib
import sys
import traceback

import midihub.simple_logging as logging


def import_module(name):
    for module_path in (name, 'midihub.endpoints.' + name):
        try:
            module = importlib.import_module(module_path)
            logging.info("Imported %s from %s", module.__name__, module.__file__)
            return module
        except ImportError as e:
            if e.message != 'No module named ' + name:
                raise
    raise ImportError("Unrecognized MIDI endpoint: module %s not found" % name)

def make_midi_dst(arg):
    if arg == '-':
        arg = 'pipe:'
    elif ':' not in arg:
        arg = 'smf://' + arg
    (scheme, arg) = arg.split(':', 1)
    module = import_module(scheme)
    if not hasattr(module, 'make_dst'):
        raise RuntimeError("%r does not define a MIDI sink" % module)
    return module.make_dst(arg[2:])


def main(args):
    if args.path:
        sys.path.insert(0, args.path)
    sinks = map(make_midi_dst, args.dst)
    def emit(code, *args):
        if code == 0x90 and args[1] == 0:  # sometimes note_off arrives as note_on with vel=0
            code = 0x80
            args = (args[0],)
        for s in sinks[:]:
            try:
                s.emit(code, *args)
            except Exception as e:
                if not isinstance(e, StopIteration):
                    traceback.print_exc()
                try: s.eof()
                except Exception: pass
                sinks.remove(s)
                if not sinks:
                    raise StopIteration()
    try:
        src = args.src
        if src == '-':
            src = 'pipe:'
        elif ':' not in src:
            src = 'smf://' + src
        (scheme, arg) = src.split(':', 1)
        module = import_module(scheme)
        if not hasattr(module, 'run_src'):
            raise RuntimeError("%r does not define a MIDI source" % module)
        module.run_src(arg[2:], emit)
    except StopIteration: pass
    finally:
        for s in sinks:
            try:
                if hasattr(s, 'eof'):
                    s.eof()
            except Exception:
                traceback.print_exc()


if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('--path', help="dir to add to endpoint module search path (often .)")
    parser.add_argument('src', help="- (stdin) | .mid file | midi: (realtime)")
    parser.add_argument('dst', nargs='+', help="- (stdout) | .mid file | udp://HOST | fluid: | midi: (realtime)")
    main(parser.parse_args())
